# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Scala CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: 'sbt'
      - name: Run Tests with Coverage
        id: coverage
        run: |
          sbt coverage test coverageReport | tee coverage_output.txt
      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: target/scala-2.13/scoverage-report
      - name: Post coverage summary
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const output = fs.readFileSync('coverage_output.txt', 'utf8');
            console.log('Coverage Output:', output);
            const coverageLines = output.match(/\[info\] Statement coverage\.: .*%|\[info\] Branch coverage\.\.\.\.: .*%|\[info\] All done. Coverage was stmt=\[.*%\] branch=\[.*%\]/g);
            if (coverageLines) {
              const message = coverageLines.join('\n');
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `Coverage Report:\n${message}`
              });
            } else {
              console.error('Coverage information not found in the output.');
            }